"""
Django settings for blango project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

from configurations import Configuration
from configurations import values
import dj_database_url


##import platform
##DEV_MODE=(platform.node() == 'salutecombine-stadiumbison')
##print("platform.node():",platform.node())
##print("platform.uname()",platform.uname())
##print("DEV_MODE:",DEV_MODE)

class Dev(Configuration):

# Django Registration has the ability to disable registration by adding REGISTRATION_OPEN = False to your settings.py. If that’s done, then the registration_closed.html template will be shown instead of the registration form.    
    REGISTRATION_OPEN = True
    ACCOUNT_ACTIVATION_DAYS = 7
## fo    
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

    AUTH_USER_MODEL = "blango_auth.User"
#
## cache to Memory (outside application)
## need @sudo apt install memcached"
## ## Don't work
#    CACHES = {
#    "default": {
#        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
#        "LOCATION": "127.0.0.1:11211",
#               }
#             }

## cache to FileSystem
#    CACHES = {
#    "default": {
#        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
#        "LOCATION": "/var/tmp/django_cache",
#               }
#             }


##  cache to Memory (by Django )
    CACHES = {
        "default": {
          "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
## The LOCATION setting is not required, unless you have multiple local-memory caches. In which case, it should be unique for each one.          
          "LOCATION": "unique-snowflake",
                   }
             }

## Dummy cache
#    CACHES = {
#          "default": {
#          "BACKEND": "django.core.cache.backends.dummy.DummyCache",
#                     }
#             }


    PASSWORD_HASHERS = [
      'django.contrib.auth.hashers.Argon2PasswordHasher',
      'django.contrib.auth.hashers.PBKDF2PasswordHasher',
      'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
      'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
                       ]

    ADMINS = [("rva", "domino-sender@mail.ru"), ("Valery", "longvalery@gmail.com")]
    DJANGO_ADMINS="rva,domino-sender@mail.ru;Valery,longvalery@gmail.com"
    LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
                               },
               },
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
                   },
                  },

    "handlers": {
        "console": {"class": "logging.StreamHandler", "stream": "ext://sys.stdout","formatter": "verbose",},
       # "file": {"class": "logging.FileHandler", "filename": "/var/log/blango.log"},
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],
        },
                },
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
    },            
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
                }
              }
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = "django-insecure-ym=d)ft4%)xiukqr&tgstl6i2091+x_#&o%*%n6g^epgy(bpd6"
    # SECURITY WARNING: don't run with debug turned on in production!
    ## DEBUG = True
    DEBUG = values.BooleanValue(True)
    ##DEBUG = False
    ALLOWED_HOSTS = [u"*",
                     "cargopassage-gilbertswim-8000.codio.io",
                     "ricardobutton-visiblebundle-8000.codio.io",
                    ]
    

    X_FRAME_OPTIONS = 'ALLOW-FROM ' + os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io'
    CSRF_COOKIE_SAMESITE = None
    CSRF_TRUSTED_ORIGINS = [os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io']
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SAMESITE = 'None'

# Application definition

    INSTALLED_APPS = [
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
     "blango_auth",
     "blog",
     "crispy_forms",
     "crispy_bootstrap5",
     "debug_toolbar",
                     ]

    MIDDLEWARE = [
     "debug_toolbar.middleware.DebugToolbarMiddleware",   
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
 #   'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
 #   'django.middleware.clickjacking.XFrameOptionsMiddleware',
      
                 ]
    INTERNAL_IPS = ["192.168.11.179"]

    DEBUG_TOOLBAR_CONFIG = {
       "SHOW_TOOLBAR_CALLBACK" : lambda request: True,
                           }
    ROOT_URLCONF = 'blango.urls'

    TEMPLATES = [
      {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
                   },
    },
               ]

    WSGI_APPLICATION = 'blango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#    DATABASES = {
#      'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#                 }
#                }
    DATABASES = {
    "default": dj_database_url.config(default=f"sqlite:///{BASE_DIR}/db.sqlite3"),
    "alternative": dj_database_url.config(
        "ALTERNATIVE_DATABASE_URL",
        default=f"sqlite:///{BASE_DIR}/alternative_db.sqlite3",
    ),
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
       {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
       },
       {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
       },
       {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
       },
       {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
       },
                              ]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'ru-RU'


    #TIME_ZONE = 'Europe/Moscow'
# Note that the environ_prefix applies only to that use of the Value class. Any other uses of the class would still look for the prefix DJANGO (or whatever prefix was specified for them).
# Before moving on we’ll clean up some of the testing changes. First remove the environ_prefix="BLANGO" argument from the TIME_ZONE setting, so it’s back to this:    
    TIME_ZONE = values.Value('Europe/Moscow', environ_prefix="BLANGO")
# TIME_ZONE = environ.get("TIME_ZONE", "UTC")    

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = '/static/'
    ## STATIC_URL = "https://preludecredit-baboongallery-8000.codio.io/static/"
    ## STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static"),]

    STATICFILES_FINDERS = (
          'django.contrib.staticfiles.finders.FileSystemFinder',
          'django.contrib.staticfiles.finders.AppDirectoriesFinder',
                          )


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


print("INTERNAL_IPS - %s" % Dev.INTERNAL_IPS)

print("STATIC_URL - %s" % Dev.STATIC_URL)

class Prod(Dev):
    DEBUG = False
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    ##SECRET_KEY = values.SecretValue("any-hard-coded-value")
    ALLOWED_HOSTS = values.ListValue(["localhost", "0.0.0.0", ".codio.io"])
### ALLOWED_HOSTS=localhost,0.0.0.0,.codio.io python3 manage.py runserver 0.0.0.0:8000 
## Cashe to Database   
## Need  "python manage.py createcachetable" before use
    CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
               }
             }

# Application definition

    INSTALLED_APPS = [
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
     "blango_auth",
     "blog",
     "crispy_forms",
     "crispy_bootstrap5",
                     ]             
    MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
 #   'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
 #   'django.middleware.clickjacking.XFrameOptionsMiddleware',
      
                 ]



##################################################

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+sn%dpa!086+g+%44z9*^j^q-u4n!j(#wl)x9a%_1op@zz2+1-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']
X_FRAME_OPTIONS = 'ALLOW-FROM ' + os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io'
CSRF_COOKIE_SAMESITE = None
CSRF_TRUSTED_ORIGINS = [os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io']
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = 'None'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "blog",
    "crispy_forms",
    "crispy_bootstrap5",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
 #   'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
 #   'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-RU'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

#STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, "static")
#STATICFILES_DIRS = []

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
